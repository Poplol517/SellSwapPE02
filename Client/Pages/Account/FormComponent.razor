@inject HttpClient _client

<EditForm Model="@account" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
 
        <div class="form-group">
            <label>UserName: </label>
            <div>
                <InputText @bind-Value="account.UserName" class="form-control" />
                <ValidationMessage For="@(() => account.UserName)" />
            </div>
        </div> 

        <div class="form-group">
            <label>Phone Number: </label>
            <div>
                <InputNumber @bind-Value="account.Phone" class="form-control" />
                <ValidationMessage For="@(() => account.Phone)" />
            </div>
        </div>

            <div class="form-group">
                <label>Address: </label>
                <div>
                    <InputText @bind-Value="account.Address" class="form-control" />
                    <ValidationMessage For="@(() => account.Address)" />
                </div>
            </div> 
        <div class="form-group">
            <label>Email: </label>
            <div>
                <InputText @bind-Value="account.Email" class="form-control"/>
                <ValidationMessage For="@(() => account.Email)" />
            </div>
        </div>

        
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">@ButtonText</button>
    }

    <BacktoList Target="user/account" />
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Account? account { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Account>? Accounts;
    private IList<Listing>? Listings;
    private IList<Category>? Categories;
    private IList<ListingStatus>? ListingStatus;
    private IList<ListingType>? ListingTypes;
    private IList<ConditionType>? ConditionTypes;

    protected async override Task OnInitializedAsync() //when the page loads
    {
        Accounts = await _client.GetFromJsonAsync<List<Account>>($"{Endpoints.AccountsEndpoint}");
        Listings = await _client.GetFromJsonAsync<List<Listing>>($"{Endpoints.ListingsEndpoint}");
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
        ListingStatus = await _client.GetFromJsonAsync<List<ListingStatus>>($"{Endpoints.ListingStatusEndpoint}");
        ListingTypes = await _client.GetFromJsonAsync<List<ListingType>>($"{Endpoints.ListingTypeEndpoint}");
        ConditionTypes = await _client.GetFromJsonAsync<List<ConditionType>>($"{Endpoints.ConditionTypeEndpoint}");


    }

}