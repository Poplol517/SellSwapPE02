@* Index Page for listings *@
@page "/staff/account"

@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject NavigationManager _navManager
@inject SweetAlertService swal
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3 class="card-title">Staff View Account Page</h3>
<br />
<a href="/listings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Listing
</a>
<br />
<br />
@if (Accounts == null)
{
    <div class="alert alert-info">Loading Accounts. . .</div>
}
else
{
    <table class="table table-responsive" id="buylistingsTable">
        <thead>
            <tr>
                <th>UserName</th>
                <th>Phone Number</th>
                <th>Email</th>
                @*              <th>Category</th>
            <th>Listing Status</th>
            <th>Listing Type</th>
            <th>Condition Type</th>
            <th>Created By</th> *@
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in Accounts)
            {
                <tr>
                    <td>@account.UserName</td>
                    <td>@account.Phone</td>
                    <td>@account.Email</td>
                    @*                         <td>@listing.Category?.Name</td>
            <td>@listing.ListingStatus?.Name</td>
            <td>@listing.ListingType?.Name</td>
            <td>@listing.ConditionType?.Name</td>
            <td>@listing.Lister</td> *@
                    <td>
                        <a href="/accounts/edit/@account.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(account.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>


            }
        </tbody>
    </table>
}

@code {
    private List<Account>? Accounts;


    protected async override Task OnInitializedAsync()
    {
        Accounts = await _client.GetFromJsonAsync<List<Account>>($"{Endpoints.AccountsEndpoint}");
    }


    async Task Delete(int accountId)
    {
        var account = Accounts.First(o => o.Id == accountId);
        if (account != null)
        {
            var result = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Do you wish to remove this account?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Remove",
                    CancelButtonText = "No, let me rethink"
                });
            var confirm = !string.IsNullOrEmpty(result.Value);
            if (!confirm)
            {

            }
            else
            {
                swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Removed",
                        Text = "The listing has been removed",
                        Icon = SweetAlertIcon.Success,
                    });
                await _client.DeleteAsync($"{Endpoints.AccountsEndpoint}/{accountId}");
                await OnInitializedAsync();
                _navManager.NavigateTo("staff/account");
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#buylistingsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#buylistingsTable");
    }

    private async Task<string> GetUserName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity?.Name ?? "Unknown";
    }
}
