@page "/conversations/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject AuthenticationStateProvider _authStateProvider
@attribute [Authorize]

<h3 class="card-title">Chat</h3>
<br />

<div>
    @if (ChatMessages != null)
    {
        <ul id="chatMessages">
            <textarea style="width: 100%; height: 500px;" @ref="TextAreaRef">
                @foreach (var message in ChatMessages
                   .Where(m => m.ConversationId == id))
                {
                    var sender = (message.Sender == currentUser) ? "You" : message.Sender;

                    @($"{sender}: {message.Message}\n")
                }
                </textarea>
        </ul>
    }
</div>

<div>
    <InputText @bind-Value="chatmessage.Message" class="form-control" />
    <button @onclick="SendMessage">Send Message</button>
</div>

@code {
    [Parameter] public int id { get; set; }
    ChatMessage chatmessage = new ChatMessage();
    Listing listing = new Listing(); // Change to non-nullable Listing
    private IList<ChatMessage> ChatMessages; // Initialize as an empty list
    private string currentUser;
    ElementReference TextAreaRef;

    protected async override Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUser = user.Identity.Name;
        ChatMessages = await _client.GetFromJsonAsync<List<ChatMessage>>($"{Endpoints.ChatMessagesEndpoint}");
    }

    protected async override Task OnParametersSetAsync()
    {
        try
        {
            // Ensure that the id parameter is being passed correctly
            listing = await _client.GetFromJsonAsync<Listing>($"{Endpoints.ListingsEndpoint}/{id}");
        }
        catch (Exception ex)
        {
            // Handle the exception, log it, or display an error message
            Console.WriteLine($"Error fetching Listing: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        // Set the sender, timestamp, and listingId for the new message
        chatmessage.Sender = currentUser;
        chatmessage.Timestamp = DateTime.Now;
        chatmessage.ConversationId = id;

        // Send the message to the server by calling the CreateMessage method
        await _client.PostAsJsonAsync(Endpoints.ChatMessagesEndpoint, chatmessage);

        // Clear the InputText box by resetting the chatmessage object
        chatmessage = new ChatMessage();

        // Update the chat messages for the current conversation
        ChatMessages = await _client.GetFromJsonAsync<List<ChatMessage>>($"{Endpoints.ChatMessagesEndpoint}?conversationId={id}");

    }
}
