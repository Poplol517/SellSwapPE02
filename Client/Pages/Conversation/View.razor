@* Index Page for listings *@
@page "/Conversations/"
@using CurrieTechnologies.Razor.SweetAlert2;

@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject NavigationManager _navManager
@inject SweetAlertService swal
@inject AuthenticationStateProvider _authStateProvider

<h3 class="card-title">Chats</h3>
<br />
@* <a href="/listings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Listing
</a>
<br />
<br /> *@
@if (Conversations == null)
{
    <div class="alert alert-info">Loading Conversationss. . .</div>
}
else
{
    <table class="table table-responsive" id="buylistingsTable">
        <thead>
            <tr>
                <th>Listing</th>
                <th>Name</th>
                <th>Lister</th>
                <th>Buyer</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var conversation in Conversations)
            {
                if (conversation.User1 == currentUser || conversation.User2 == currentUser)
                {
                    <tr>
                        <td><img src="@conversation.Listing.Image" alt="Listing Image" style="max-width: 100px; max-height: 100px;" /></td>
                        <td>@conversation.Listing.Name</td>
                        <td>@conversation.User2</td>
                        <td>@conversation.User1</td>
                        <td>@conversation.Listing.ListingStatus.Name</td>
                        <td>
                            <a href="/conversations/@conversation.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>

                            <!-- Add delete button with a confirmation dialog -->
                            <button class="btn btn-danger" @onclick="() => DeleteConversation(conversation.Id)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>
                    </tr>


                }
                else
                {
                    <div class="alert alert-info">Loading Conversations. . .</div>
                }
            }
        </tbody>
    </table>
}

@code {
    Conversation conversation = new Conversation();
    private IList<Conversation>? Conversations;
    private string currentUser;

    protected async override Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        //for the filtering of action that can be done by different users
        currentUser = user.Identity.Name;
        Conversations = await _client.GetFromJsonAsync<List<Conversation>>($"{Endpoints.ConversationsEndpoint}");
    }

    protected async Task DeleteConversation(int conversationId)
    {
        var confirmResult = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure you want to delete this conversation?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "Cancel"
            });

        var confirmed = !string.IsNullOrEmpty(confirmResult.Value);
        if (!confirmed)
        {
            return;
        }

        // Retrieve the Listing associated with the Conversation
        var conversation = Conversations.FirstOrDefault(c => c.Id == conversationId);
        if (conversation != null)
        {
            var listingId = conversation.ListingId; // Assuming there's a property like ListingId in the Conversation

            // Fetch chat messages related to the conversation
            var chatMessagesToDelete = await _client.GetFromJsonAsync<List<ChatMessage>>(
                $"{Endpoints.ChatMessagesEndpoint}?conversationId={conversationId}");

            // Delete each chat message
            foreach (var chatMessageToDelete in chatMessagesToDelete)
            {
                await _client.DeleteAsync($"{Endpoints.ChatMessagesEndpoint}/{chatMessageToDelete.Id}");
            }

            // Delete the conversation
            await _client.DeleteAsync($"{Endpoints.ConversationsEndpoint}/{conversationId}");

            // Fetch conversations related to the listing where the current user is either the lister or the offer buyer
            var conversationsToDelete = await _client.GetFromJsonAsync<List<Conversation>>(
                $"{Endpoints.ConversationsEndpoint}?listingId={listingId}&userId={currentUser}");

            // Delete each conversation
            foreach (var conversationToDelete in conversationsToDelete)
            {
                await _client.DeleteAsync($"{Endpoints.ConversationsEndpoint}/{conversationToDelete.Id}");
            }

            swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Deleted",
                    Text = "The conversation and related messages have been deleted successfully.",
                    Icon = SweetAlertIcon.Success
                });

            // Refresh the conversation list
            Conversations = await _client.GetFromJsonAsync<List<Conversation>>($"{Endpoints.ConversationsEndpoint}");
        }
    }



    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#buylistingsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#buylistingsTable");
    }

    private async Task<string> GetUserName()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity?.Name ?? "Unknown";
    }



}
