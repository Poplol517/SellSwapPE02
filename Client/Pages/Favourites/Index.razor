@* Index Page for listings *@
@page "/account/favourites/"
@using CurrieTechnologies.Razor.SweetAlert2;

@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject NavigationManager _navManager
@inject SweetAlertService swal
@inject AuthenticationStateProvider _authStateProvider

<h3 class="card-title">Favourite Page</h3>
<br />
@* <a href="/listings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Listing
</a>
<br />
<br /> *@
@if (Favourites == null)
{
    <div class="alert alert-info">Loading Listings. . .</div>
    Console.WriteLine("not fetching data");
}
else
{
    <table class="table table-responsive" id="favourtiesTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Category</th>
                <th>Listing Status</th>
                <th>Listing Type</th>
                <th>Condition Type</th>
                <th>Created By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var favourite in Favourites)
            {
                if (favourite.Account.UserName == currentUser)
                {
                    <tr>
                        <td>@favourite.Listing.Name</td>
                        <td>@favourite.Listing.Description</td>
                        <td>@favourite.Listing.Price</td>
                        <td>@favourite.Listing.Category?.Name</td>
                        <td>@favourite.Listing.ListingStatus?.Name</td>
                        <td>@favourite.Listing.ListingType?.Name</td>
                        <td>@favourite.Listing.ConditionType?.Name</td>
                        <td>@favourite.Listing.Lister</td>
                            <td>
                                <a href="/listings/view/@favourite.Listing.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
@*                             <a href="/listings/edit/@listing.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a> *@
                            <a href="/listings/offer/@favourite.Listing.Id" class="btn btn-info">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(favourite.Listing.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                            </td>
                    </tr>
                    

                }
                else
                {
                    <div class="alert alert-info">Loading Listings. . .</div>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<Favourite>? Favourites;
    private string currentUser;

    protected async override Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        //for the filtering of action that can be done by differnt users
        currentUser = user.Identity.Name;
        Favourites = await _client.GetFromJsonAsync<List<Favourite>>($"{Endpoints.FavouritesEndpoint}");
    }


    async Task Delete(int favouriteId)
    {
        var favourite = Favourites.First(o => o.Id == favouriteId);
        if (favourite != null)
        {
            var result = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Do you wish to remove this listing?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Remove",
                    CancelButtonText = "No, let me rethink"
                });
            var confirm = !string.IsNullOrEmpty(result.Value);
            if (!confirm)
            {

            }
            else
            {
                swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Removed",
                        Text = "The listing has been removed",
                        Icon = SweetAlertIcon.Success,
                    });
                await _client.DeleteAsync($"{Endpoints.FavouritesEndpoint}/{favouriteId}");
                await OnInitializedAsync();
                _navManager.NavigateTo("favourites");
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#favouritesTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#favouritesTable");
    }

    private async Task<string> GetUserName()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity?.Name ?? "Unknown";
    }
}
