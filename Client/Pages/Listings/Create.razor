@page "/listings/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject AuthenticationStateProvider _authenticationStateProvider
@attribute [Authorize]

<h3>Create</h3>

<FormComponent ButtonText="Create Listing" listing="listing" OnValidSubmit="@CreateListing" />

@code {
    Listing listing = new Listing();

    private IList<Listing>? Listings;

    protected override async Task OnInitializedAsync()
    {
        Listings = await _client.GetFromJsonAsync<List<Listing>>($"{Endpoints.ListingsEndpoint}");

        // To bind listing to user
        // Get the authenticated user's information
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Set the authenticated user's information in the listing object
        listing.Lister = user.Identity.Name;

        // Retrieve the user ID from the claims using the 'sub' claim
        var userIdClaim = user.FindFirst("sub");
        if (userIdClaim != null)
        {
            listing.ListerId = userIdClaim.Value;
        }
        else
        {
            // Handle the case where user ID claim is not found
            // You may want to redirect to an error page or take appropriate action
        }
    }

    private async Task CreateListing()
    {
        // checked if data is binded properly
        Console.WriteLine($"Lister: {listing.Lister}");
        Console.WriteLine($"ListerId: {listing.ListerId}");
        listing.ListingStatusId = 1;

        await _client.PostAsJsonAsync(Endpoints.ListingsEndpoint, listing);
        _navManager.NavigateTo("/buy/");
    }
}
