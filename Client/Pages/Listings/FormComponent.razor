@inject HttpClient _client
@inject IJSRuntime JSRuntime

<EditForm Model="@listing" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">

       @*  <div class="form-group">
            <label>Add Image Link: </label>
            <div class="input-group">
                <InputText @bind-Value="listing.Image" class="form-control" />
                <div class="input-group-append">
                    <button type="button" class="btn btn-outline-secondary" @onclick="ShowImageHelp">?</button>
                </div>
                <ValidationMessage For="@(() => listing.Image)" />
            </div>
            @if (!string.IsNullOrEmpty(listing.Image))
            {
                <img src="@listing.Image" alt="Listing Image" @onerror="HandleImageError" style="max-width: 100px; max-height: 100px; margin-top: 10px;" />
            }
        </div> *@
        <div class="form-group">
            <label>Upload Image: </label>
            <div>
                <InputFile OnChange="OnFileChange" /> 
                @if (!string.IsNullOrEmpty(listing.Image))
                {
                    <img src="@listing.Image" alt="Uploaded Image" style="max-width: 300px; max-height: 300px; margin-top: 10px;" />
                }
                <ValidationMessage For="@(() => listing.Image)" />
            </div>
        </div>


        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="listing.Name" class="form-control"/>
                <ValidationMessage For="@(() => listing.Name)" />
            </div>
        </div> 
        
        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputText @bind-Value="listing.Description" class="form-control" />
                <ValidationMessage For="@(() => listing.Description)" />
            </div>
        </div>
        @if (listing.ListingTypeId == 2)
        {
            listing.Price = null;
        }
        else
        {
            <div class="form-group">
                <label>Price: </label>
                <div>
                    <InputNumber @bind-Value="listing.Price" class="form-control" />
                    <ValidationMessage For="@(() => listing.Price)" />
                </div>
            </div>
        }
     <div class="form-group">
        <label>Category: </label>
        <div>
            <InputSelect @bind-Value="listing.CategoryId" class="form-control">
                <option value="">-- Select Category --</option>
                @if (Categories != null)
                {
                    foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => listing.Id)" />
        </div>
    </div> 

@*      <div class="form-group">
        <label>Listing Status: </label>
        <div>
            <InputSelect @bind-Value="listing.ListingStatusId" class="form-control">
                <option value="">-- Select Status --</option>
                @if (ListingStatus != null)
                {
                    foreach (var status in ListingStatus)
                    {
                        <option value="@status.Id">@status.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => listing.Id)" />
        </div>
    </div>   *@

     <div class="form-group">
        <label>Listing Type: </label>
        <div>
            <InputSelect @bind-Value="listing.ListingTypeId" class="form-control">
                <option value="">-- Select Type --</option>
                @if (ListingTypes != null)
                {
                    foreach (var types in ListingTypes)
                    {
                        <option value="@types.Id">@types.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => listing.Id)" />
        </div>
    </div>
     <div class="form-group">
        <label>Condition: </label>
        <div>
            <InputSelect @bind-Value="listing.ConditionTypeId" class="form-control">
                <option value="">-- Select Condition --</option>
                @if (ConditionTypes != null)
                {
                    foreach (var condition in ConditionTypes)
                    {
                        <option value="@condition.Id">@condition.Name</option>
                    }
                 }
            </InputSelect>
            <ValidationMessage For="@(() => listing.Id)" />
        </div>
    </div> 


    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">@ButtonText</button>
    }

    @if (listing != null && listing.ListingType != null && listing.ListingType.Id != 2)
    {
        <BacktoList Target="buy" />
    }
    else
    {
        <BacktoList Target="swap" />
    }

    
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Listing? listing { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Listing>? Listings;
    private IList<Category>? Categories;
    private IList<ListingStatus>? ListingStatus;
    private IList<ListingType>? ListingTypes;
    private IList<ConditionType>? ConditionTypes;

    protected async override Task OnInitializedAsync() //when the page loads
    {
        Listings = await _client.GetFromJsonAsync<List<Listing>>($"{Endpoints.ListingsEndpoint}");
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
        ListingStatus = await _client.GetFromJsonAsync<List<ListingStatus>>($"{Endpoints.ListingStatusEndpoint}");
        ListingTypes = await _client.GetFromJsonAsync<List<ListingType>>($"{Endpoints.ListingTypeEndpoint}");
        ConditionTypes = await _client.GetFromJsonAsync<List<ConditionType>>($"{Endpoints.ConditionTypeEndpoint}");


    }
    // private void ShowImageHelp()
    // {
    //     string message = "Instructions on how to submit an image:\n\n1. Copy the image address.\n2. Paste the link into the 'Image Link' field.\n3. Click the 'Create Listing' button to submit the form.";

    //     // Display alert with instructions
    //     JSRuntime.InvokeVoidAsync("alert", message);
    // }
    // private void HandleImageError()
    // {
    //     // listing.Image = "/images/404_image.jpg";
    //     Console.WriteLine("Error loading image: " + listing.Image);
    // }
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        listing.Image = imageData;

        Console.WriteLine(listing.Image);
    }
}
