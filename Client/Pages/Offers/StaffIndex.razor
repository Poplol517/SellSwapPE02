@page "/staff/offers"

@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject NavigationManager _navManager
@inject SweetAlertService swal



<h3 class=" = "card-title">Offers</h3>
<br />
@if (Offers == null)
{
<div class="alert alert-info">Loading Offers. . .</div>
}
else
{
    <table class="table table-responsive" id="offersTable">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Description</th>
                <th>Price</th>
                @* <th>Category</th>*@
                <th>Listing Type</th>
                <th>Offer Status</th>
                <th>Offered By</th>
                @* <th>Condition Type</th> *@
                <th>Actions</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var offer in Offers)
            {
                    <tr>
                        @*  <td>@offer.AccountId.Name</td> *@
                    <td>@offer.Listing?.Name</td>
                    <td>@offer.Description</td>
                    <td>
                        @if (offer.Listing.ListingType.Name != "Swap")
                        {
                            @offer.Price
                        }
                        else
                        {
                            <text>Not Applicable</text>
                        }
                    </td>
                    <td>@offer.Listing?.ListingType.Name</td>
                    <td>@offer.Status</td>
                    <td>@offer.Buyer</td>
                    <td>
@*                          <a href="/offers/view/@offer.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/listing/edit/@offer.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a> *@
                        <button class="btn btn-warning" @onclick="@(()=>Delete(offer.Id))" >
                            <span class="oi oi-tick"></span>
                        </button> 
                    </td>
                    </tr>
             }
        </tbody>
</table>
}
   

@code {
    private List<Offer>? Offers;
    protected async override Task OnInitializedAsync()
    {
        Offers = await _client.GetFromJsonAsync<List<Offer>>($"{Endpoints.OffersEndpoint}");

    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#offersTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#offersTable");
    }
    async Task Delete(int offerId)
    {
        var offer = Offers.First(o => o.Id == offerId);
        if (offer != null)
        {
            var result = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Do you wish to remove this listing?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Remove",
                    CancelButtonText = "No, let me rethink"
                });
            var confirm = !string.IsNullOrEmpty(result.Value);
            if (!confirm)
            {

            }
            else
            {
                swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Removed",
                        Text = "The listing has been removed",
                        Icon = SweetAlertIcon.Success,
                    });
                await _client.DeleteAsync($"{Endpoints.OffersEndpoint}/{offerId}");
                await OnInitializedAsync();
                _navManager.NavigateTo("offers");
            }
        }
    }
}
