@page "/offers/view/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager _navManager
@inject AuthenticationStateProvider _authStateProvider
@inject SweetAlertService swal
<h3>View</h3>

@if (Offers != null)
{
    var offer = Offers.FirstOrDefault(o => o.Id == id);
    if (offer != null)
    {
        <p>Listing Name: @offer.Listing.Name</p>
        <p>Description: @offer.Description</p>
        <p>Type:@offer.Listing.ListingType.Name</p>
        <p>Condition:@offer.Listing.ConditionType.Name</p>
        if (offer.Listing.Price == null)
        {
        }
        else
        {
            <p>Lisited Price:@offer.Listing.Price</p>
            <p>Offered Price:@offer.Price</p>
        }
        if (offer.Listing.Lister==currentUser){
        <button @onclick="() => Approve(offer.Id)">Approve</button>
        <button @onclick="() => Reject(offer.Id)">Reject</button>}
    }
}
else
{
    <p>Loading Offer...</p>
}

<BacktoOffer Target="offers" />


@code {
    [Parameter] public int id { get; set; }

    private List<Offer>? Offers;
    Offer? offers = new Offer();
    private string currentUser;
    protected async override Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUser = user.Identity.Name;
        Offers = await _client.GetFromJsonAsync<List<Offer>>($"{Endpoints.OffersEndpoint}");

    }
    protected async Task Approve(int offerId)
    {
        var offer = Offers.FirstOrDefault(o => o.Id == offerId);
        if (offer != null)
        {
            var result = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Do you wish to approve this offer?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Approve",
                    CancelButtonText = "No, let me rethink"
                });
            var confirm = !string.IsNullOrEmpty(result.Value);
            if (!confirm)
            {
                return;
            }

            // Retrieve the Listing associated with the Offer
            var listingId = offer.ListingId; // Assuming there's a property like ListingId in the Offer
            var listing = await _client.GetFromJsonAsync<Listing>($"{Endpoints.ListingsEndpoint}/{listingId}");

            if (listing != null)
            {
                // Change the status of the selected offer to "Approved"
                offer.Status = "Approved";
                await _client.PutAsJsonAsync($"{Endpoints.OffersEndpoint}/{offerId}", offer);

                // Iterate through all offers with the same listing and reject them
                foreach (var otherOffer in Offers.Where(o => o.ListingId == listingId && o.Id != offerId))
                {
                    otherOffer.Status = "Rejected";
                    otherOffer.Reason = "A deal was made";
                    await _client.PutAsJsonAsync($"{Endpoints.OffersEndpoint}/{otherOffer.Id}", otherOffer);
                }

                // Update the ListingStatusId property of the Listing object
                listing.ListingStatusId = 2; // Set the desired status ID for approval

                swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Approved",
                        Text = "Woo-Hoo! You have made a deal!",
                        Icon = SweetAlertIcon.Success,
                    });

                await _client.PutAsJsonAsync($"{Endpoints.ListingsEndpoint}/{listingId}", listing);
                _navManager.NavigateTo("offers");
            }
        }
    }



    protected async Task Reject(int offerId)
    {

        var offer = Offers.FirstOrDefault(o => o.Id == offerId);
        if (offer != null)
        {
            var result = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Do you wish to reject this offer?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Reject",
                    CancelButtonText = "No, let me rethink"
                });
            var confirm = !string.IsNullOrEmpty(result.Value);
            if (!confirm)
            {

            }
            else
            {
                var text=await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Reason for rejection",
                    Input = "text",
                    InputLabel = "Reason",
                    InputPlaceholder="Enter your reason",
                    Icon = SweetAlertIcon.Error,
                    
                });
               
                    offer.Reason = text.Value;
                    offer.Status = "Rejected";
                    await _client.PutAsJsonAsync($"{Endpoints.OffersEndpoint}/{offerId}", offer);
                    _navManager.NavigateTo("offers");
                
            }
        }
        }

    }

