@page "/swap/"

@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable



<h3 class=" = " card-title">Swap Page</h3>
<br />
<a href="/listings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Listing
</a>
<br />
<br />
@if (Listings == null)
{
    <div class="alert alert-info">Loading Listings. . .</div>
}
else
{
    <table class="table table-responsive" id="swaplistingsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Category</th>
                <th>Listing Status</th>
                <th>Listing Type</th>
                <th>Actions</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var listing in Listings)
            {
                if (listing.ListingType.Id==2){
                <tr>
                    <td>@listing.Name</td>
                    <td>@listing.Description</td>
                    <td>@listing.Price</td>
                    <td>@listing.Category?.Name</td>
                    <td>@listing.ListingStatus?.Name</td>
                    <td>@listing.ListingType?.Name</td>
                    <td>
                        <a href="/listings/view/@listing.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/listings/edit/@listing.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(listing.Id))">
                            <span class="oi oi-delete"></span>
                        </button> 
                    </td>
                    </tr>
                }
                else
                {
                    <div class="alert alert-info">Loading Listings. . .</div>
                }
            }
        </tbody>
    </table>
}


@code {
    private List<Listing>? Listings;
    protected async override Task OnInitializedAsync()
    {
        Listings = await _client.GetFromJsonAsync<List<Listing>>($"{Endpoints.ListingsEndpoint}");

    }
    async Task Delete(int listingId)
    {
        if (Listings != null)
        {
            var listing = Listings.First(q => q.Id == listingId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {listing.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ListingsEndpoint}/{listingId}");
                await OnInitializedAsync();
            }
        }

    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#swaplistingsTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#swaplistingsTable");
    }
}
