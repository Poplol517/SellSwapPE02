// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SellSwap.Server.Data;

#nullable disable

namespace SellSwap.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240203141557_AddDataTable")]
    partial class AddDataTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SellSwap.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "013b3b45-ad8c-41f3-95e9-5b2c0d60b1fd",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGyfuVOW0WZptUMOKdjxaiViDu4yuEeqke+ZbzAAtXv6pk8lB35W+nYTbebNVFR0zQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47f14f04-6528-4894-8c48-32bbdc663c7f",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "673b6b78-250e-422e-9e4c-bae4bb50db41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b0d5604-d4c5-4f7d-bf97-95522e681233",
                            Email = "ggwp@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tom",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            NormalizedEmail = "GGWP@GMAIL.COM",
                            NormalizedUserName = "GGWP@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEUHoIM/tCjUorwX6dBFUCMUO9mQ56CSnoLNb5FN1GmCTYDnVHGE0z0PNXLU5/LCWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78e10dfe-528b-496e-891b-e72267e92c9f",
                            TwoFactorEnabled = false,
                            UserName = "ggwp@gmail.com"
                        },
                        new
                        {
                            Id = "c3a0c046-d1b0-4607-a5d9-78b32026709c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afd4cdfe-fd1c-4949-94fc-ae47d0e417a8",
                            Email = "staff@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mary",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED9ka3uv/upB6EROsNQ684E4PeN4h3uU1MwxwZQ1f3wrHOuNNZHNuTRUA6po0YYZMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9d735b4-f460-4921-a11c-72a79226c1ff",
                            TwoFactorEnabled = false,
                            UserName = "staff@gmail.com"
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7902),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7903),
                            Name = "Phone"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7905),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7906),
                            Name = "Figure"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7907),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7907),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7909),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7909),
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7911),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7911),
                            Name = "Clothing & Accessories"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7913),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7913),
                            Name = "Home & Garden"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7914),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7915),
                            Name = "Books & Media"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7916),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7917),
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7918),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7919),
                            Name = "Toys & Games"
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConversationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.ConditionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConditionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8154),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8155),
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8157),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8157),
                            Name = "Well Used"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8159),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8159),
                            Name = "Damaged"
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ListingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("User1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountId1")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId1");

                    b.HasIndex("ListingId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountId1")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ConditionTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ListingStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ListingTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccountId1");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConditionTypeId");

                    b.HasIndex("ListingStatusId");

                    b.HasIndex("ListingTypeId");

                    b.ToTable("Listings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ConditionTypeId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7301),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7319),
                            Description = "well used without a scratch",
                            Image = "/images/iphone-15-finish-select-202309-6-1inch-black.jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Iphone",
                            Price = 1200.0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            ConditionTypeId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7323),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7324),
                            Description = "well used without a scratch",
                            Image = "/images/vn-11134207-7r98o-ll5dstlhxsjad9_880302e6f6444e4189236838fbb1c647.jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 2,
                            Name = "POP Mart figure"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            ConditionTypeId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7328),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7328),
                            Description = "Full HD Smart TV with great picture quality",
                            Image = "/images/Hisense-A4-32-HD-Smart-TV.jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Smart TV",
                            Price = 800.0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            ConditionTypeId = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7331),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7332),
                            Description = "Comfortable leather sofa in excellent condition",
                            Image = "/images/_mg_9210_2.jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 2,
                            Name = "Leather Sofa",
                            Price = 500.0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            ConditionTypeId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7335),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7335),
                            Description = "Stylish men's winter jacket, size XL",
                            Image = "/images/download.jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Men's Winter Jacket",
                            Price = 80.0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            ConditionTypeId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7338),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7339),
                            Description = "Outdoor table and chairs set for your garden",
                            Image = "/images/img_0509-edit.jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Garden Table and Chairs",
                            Price = 150.0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            ConditionTypeId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7341),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7342),
                            Description = "Complete set of Harry Potter books in good condition",
                            Image = "/images/718X1SWIsjL._AC_UF1000,1000_QL80_.jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 2,
                            Name = "Harry Potter Book Set",
                            Price = 60.0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            ConditionTypeId = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7345),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7345),
                            Description = "Hardtail mountain bike with front suspension",
                            Image = "/images/download (1).jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Mountain Bike",
                            Price = 300.0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            ConditionTypeId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7348),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7349),
                            Description = "Brand new in box, never opened.",
                            Image = "/images/81IWsqrVMTL._AC_UF894,1000_QL80_.jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 2,
                            Name = "Samsung Galaxy S21",
                            Price = 899.99000000000001
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 9,
                            ConditionTypeId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7351),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7352),
                            Description = "Complete set with original box.",
                            Image = "/images/81kmuPJ9IOL.jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 2,
                            Name = "Lego Star Wars Millennium Falcon"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            ConditionTypeId = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7382),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(7383),
                            Description = "Used but in excellent condition.",
                            Image = "/images/amazon_echo_dot_3__echo_dot_3r_1610044909_d1b25298_progressive.jpg",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Amazon Echo Dot (3rd Gen)",
                            Price = 30.0
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.ListingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ListingStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8593),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8594),
                            Name = "Avaliable"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8596),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8597),
                            Name = "Sold"
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.ListingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ListingType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8373),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8374),
                            Name = "Sell"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8375),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8376),
                            Name = "Swap"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8377),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8378),
                            Name = "Sell and Swap"
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Buyer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ListingId")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ListingId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8786),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8787),
                            Description = "",
                            ListingId = 1,
                            Price = 10,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8790),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8790),
                            Description = "Really like it",
                            ListingId = 1,
                            Price = 100,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8793),
                            DateUpdated = new DateTime(2024, 2, 3, 22, 15, 56, 929, DateTimeKind.Local).AddTicks(8793),
                            Description = "Really like it",
                            ListingId = 2,
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SellSwap.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SellSwap.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSwap.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SellSwap.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.ChatMessage", b =>
                {
                    b.HasOne("SellSwap.Shared.Domain.Conversation", "Coversation")
                        .WithMany()
                        .HasForeignKey("ConversationId");

                    b.Navigation("Coversation");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Conversation", b =>
                {
                    b.HasOne("SellSwap.Shared.Domain.Listing", "Listing")
                        .WithMany()
                        .HasForeignKey("ListingId");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Favourite", b =>
                {
                    b.HasOne("SellSwap.Shared.Domain.Account", "Account")
                        .WithMany("Favourites")
                        .HasForeignKey("AccountId1");

                    b.HasOne("SellSwap.Shared.Domain.Listing", "Listing")
                        .WithMany()
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Listing", b =>
                {
                    b.HasOne("SellSwap.Shared.Domain.Account", "Account")
                        .WithMany("Listing")
                        .HasForeignKey("AccountId1");

                    b.HasOne("SellSwap.Shared.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSwap.Shared.Domain.ConditionType", "ConditionType")
                        .WithMany()
                        .HasForeignKey("ConditionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSwap.Shared.Domain.ListingStatus", "ListingStatus")
                        .WithMany()
                        .HasForeignKey("ListingStatusId");

                    b.HasOne("SellSwap.Shared.Domain.ListingType", "ListingType")
                        .WithMany()
                        .HasForeignKey("ListingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("ConditionType");

                    b.Navigation("ListingStatus");

                    b.Navigation("ListingType");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Offer", b =>
                {
                    b.HasOne("SellSwap.Shared.Domain.Account", "Account")
                        .WithMany("Offer")
                        .HasForeignKey("AccountId");

                    b.HasOne("SellSwap.Shared.Domain.Listing", "Listing")
                        .WithMany()
                        .HasForeignKey("ListingId");

                    b.Navigation("Account");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Account", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Listing");

                    b.Navigation("Offer");
                });
#pragma warning restore 612, 618
        }
    }
}
