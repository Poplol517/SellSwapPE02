// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SellSwap.Server.Data;

#nullable disable

namespace SellSwap.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SellSwap.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e247f6e3-70d5-4479-853e-8c12ae771a4d",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECPAfSAHtL6wmOc60ZB4Cjlx0fQbl16nPmuxNba+dZ054yBvubFK6wOcgzkYFmwp4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cc7afb1-b601-4542-8a1e-22a71ace3155",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "673b6b78-250e-422e-9e4c-bae4bb50db41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "186dcb7c-553a-4a67-afd8-057bc6dbcc5c",
                            Email = "ggwp@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tom",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            NormalizedEmail = "GGWP@GMAIL.COM",
                            NormalizedUserName = "GGWP@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAb3J1pY+24OReZuZcq4LP3yBh1RJlqX28Xk0GQdmc/UjfcT2n3J7TC85UF9hoHQhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85884e47-0a85-4292-a8de-9f718a6ee2d5",
                            TwoFactorEnabled = false,
                            UserName = "ggwp@gmail.com"
                        },
                        new
                        {
                            Id = "c3a0c046-d1b0-4607-a5d9-78b32026709c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c27497e-131c-4775-ba80-7891f40a1952",
                            Email = "staff@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mary",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFqRZV8cB8iBKSB1fANS/QKHWYDXtwKz/SwChwiFmEpMIbrkjpWrXDmWD3CBsdzLGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57bad482-468c-44f2-867c-f9e5ea1fb973",
                            TwoFactorEnabled = false,
                            UserName = "staff@gmail.com"
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5060),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5060),
                            Name = "Phone"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5063),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5063),
                            Name = "Figure"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5064),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5065),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5066),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5066),
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5067),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5068),
                            Name = "Clothing & Accessories"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5069),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5069),
                            Name = "Home & Garden"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5070),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5070),
                            Name = "Books & Media"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5071),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5072),
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5073),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5074),
                            Name = "Toys & Games"
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.ConditionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConditionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5233),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5233),
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5235),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5235),
                            Name = "Well Used"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5236),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5237),
                            Name = "Damaged"
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountId1")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId1");

                    b.HasIndex("ListingId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AccountId1")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ConditionTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ListingStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ListingTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId1");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConditionTypeId");

                    b.HasIndex("ListingStatusId");

                    b.HasIndex("ListingTypeId");

                    b.ToTable("Listings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ConditionTypeId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4643),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4653),
                            Description = "well used without a scratch",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Iphone",
                            Price = 1200
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ConditionTypeId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4658),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4658),
                            Description = "well used without a scratch",
                            ListingStatusId = 1,
                            ListingTypeId = 2,
                            Name = "POP Mart figure"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            ConditionTypeId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4661),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4662),
                            Description = "Full HD Smart TV with great picture quality",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Smart TV",
                            Price = 800
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            ConditionTypeId = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4665),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4666),
                            Description = "Comfortable leather sofa in excellent condition",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Leather Sofa",
                            Price = 500
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            ConditionTypeId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4669),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4669),
                            Description = "Stylish men's winter jacket, size XL",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Men's Winter Jacket",
                            Price = 80
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            ConditionTypeId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4672),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4672),
                            Description = "Outdoor table and chairs set for your garden",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Garden Table and Chairs",
                            Price = 150
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            ConditionTypeId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4674),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4675),
                            Description = "Complete set of Harry Potter books in good condition",
                            ListingStatusId = 1,
                            ListingTypeId = 2,
                            Name = "Harry Potter Book Set",
                            Price = 60
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            ConditionTypeId = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4677),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4677),
                            Description = "Hardtail mountain bike with front suspension",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Mountain Bike",
                            Price = 300
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            ConditionTypeId = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4679),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4680),
                            Description = "Brand new in box, never opened.",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Samsung Galaxy S21",
                            Price = 899
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 9,
                            ConditionTypeId = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4682),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4682),
                            Description = "Complete set with original box.",
                            ListingStatusId = 1,
                            ListingTypeId = 2,
                            Name = "Lego Star Wars Millennium Falcon",
                            Price = 150
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            ConditionTypeId = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4685),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(4685),
                            Description = "Used but in excellent condition.",
                            ListingStatusId = 1,
                            ListingTypeId = 1,
                            Name = "Amazon Echo Dot (3rd Gen)",
                            Price = 30
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.ListingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ListingStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5824),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5824),
                            Name = "Avaliable"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5825),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5826),
                            Name = "Sold"
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.ListingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ListingType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5381),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5381),
                            Name = "Sell"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5628),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5631),
                            Name = "Swap"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5634),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5634),
                            Name = "Sell and Swap"
                        });
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Buyer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ListingId")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ListingId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5967),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5967),
                            Description = "",
                            ListingId = 1,
                            Price = 10,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5970),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5970),
                            Description = "Really like it",
                            ListingId = 1,
                            Price = 100,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "System",
                            DateCreated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5972),
                            DateUpdated = new DateTime(2024, 1, 30, 1, 29, 46, 986, DateTimeKind.Local).AddTicks(5972),
                            Description = "Really like it",
                            ListingId = 2,
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SellSwap.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SellSwap.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSwap.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SellSwap.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Favourite", b =>
                {
                    b.HasOne("SellSwap.Shared.Domain.Account", "Account")
                        .WithMany("Favourites")
                        .HasForeignKey("AccountId1");

                    b.HasOne("SellSwap.Shared.Domain.Listing", "Listing")
                        .WithMany()
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Listing", b =>
                {
                    b.HasOne("SellSwap.Shared.Domain.Account", "Account")
                        .WithMany("Listing")
                        .HasForeignKey("AccountId1");

                    b.HasOne("SellSwap.Shared.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSwap.Shared.Domain.ConditionType", "ConditionType")
                        .WithMany()
                        .HasForeignKey("ConditionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SellSwap.Shared.Domain.ListingStatus", "ListingStatus")
                        .WithMany()
                        .HasForeignKey("ListingStatusId");

                    b.HasOne("SellSwap.Shared.Domain.ListingType", "ListingType")
                        .WithMany()
                        .HasForeignKey("ListingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("ConditionType");

                    b.Navigation("ListingStatus");

                    b.Navigation("ListingType");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Offer", b =>
                {
                    b.HasOne("SellSwap.Shared.Domain.Account", "Account")
                        .WithMany("Offer")
                        .HasForeignKey("AccountId");

                    b.HasOne("SellSwap.Shared.Domain.Listing", "Listing")
                        .WithMany()
                        .HasForeignKey("ListingId");

                    b.Navigation("Account");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("SellSwap.Shared.Domain.Account", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Listing");

                    b.Navigation("Offer");
                });
#pragma warning restore 612, 618
        }
    }
}
